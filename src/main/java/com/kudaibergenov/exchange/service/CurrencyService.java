package com.kudaibergenov.exchange.service;

import com.kudaibergenov.exchange.model.CurrencyRate;
import com.kudaibergenov.exchange.repository.CurrencyRateRepository;
import com.kudaibergenov.exchange.util.ArimaModel;
import com.kudaibergenov.exchange.util.ExcelImporter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.util.*;
import java.util.logging.Logger;
import java.util.stream.Collectors;

@Slf4j
@Service
public class CurrencyService {

    private static final Logger logger = Logger.getLogger(CurrencyService.class.getName());

    private final ExcelImporter excelImporter;
    private final CurrencyRateRepository repository;

    public CurrencyService(ExcelImporter excelImporter, CurrencyRateRepository repository) {
        this.excelImporter = excelImporter;
        this.repository = repository;
    }

    public void importFromExcel(String filePath) {
        try {
            excelImporter.importData(filePath);
            logger.info("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
        } catch (Exception e) {
            logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }

    public List<CurrencyRate> getHistoricalRates(String currency, int days) {
        if (days <= 0) {
            throw new IllegalArgumentException("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");
        }

        LocalDate endDate = LocalDate.now();
        LocalDate startDate = endDate.minusDays(days);

        List<CurrencyRate> rates = repository.findByDateBetweenAndCurrencyCode(startDate, endDate, currency);

        if (rates.isEmpty()) {
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ " + days + " –¥–Ω–µ–π –¥–ª—è –≤–∞–ª—é—Ç—ã: " + currency);
        }

        return rates;
    }

    // ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é (–±–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    public List<BigDecimal> forecastForWeek(String currency, int year, int month, int startDay) {
        LocalDate startOfWeek = LocalDate.of(year, month, startDay);
        LocalDate lastTrainingDate = startOfWeek.minusDays(1);
        LocalDate trainingStartDate = lastTrainingDate.minusYears(2); // 2 –≥–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö

        List<CurrencyRate> trainingData = repository.findByDateBetweenAndCurrencyCode(trainingStartDate, lastTrainingDate, currency);
        if (trainingData.size() < 100) {
            throw new IllegalStateException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.");
        }

        List<BigDecimal> trainingRates = trainingData.stream()
                .sorted(Comparator.comparing(CurrencyRate::getDate))
                .map(CurrencyRate::getRate)
                .collect(Collectors.toList());

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (1,1,0)
        return Arrays.asList(ArimaModel.predict(trainingRates, 7));
    }

    // ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–π –Ω–µ–¥–µ–ª–µ
    public Map<String, Object> testModelForWeek(String currency, int year, int month, int startDay) {
        LocalDate startOfWeek = LocalDate.of(year, month, startDay);
        LocalDate endOfWeek = startOfWeek.plusDays(6);
        LocalDate lastTrainingDate = startOfWeek.minusDays(1);
        LocalDate trainingStartDate = lastTrainingDate.minusYears(2);

        List<CurrencyRate> actualRates = repository.findByDateBetweenAndCurrencyCode(startOfWeek, endOfWeek, currency);
        if (actualRates.isEmpty()) {
            throw new IllegalStateException("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ " + startOfWeek + " - " + endOfWeek + " –¥–ª—è " + currency);
        }

        List<CurrencyRate> trainingData = repository.findByDateBetweenAndCurrencyCode(trainingStartDate, lastTrainingDate, currency);
        if (trainingData.size() < 100) {
            throw new IllegalStateException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.");
        }

        List<BigDecimal> trainingRates = trainingData.stream()
                .sorted(Comparator.comparing(CurrencyRate::getDate))
                .map(CurrencyRate::getRate)
                .collect(Collectors.toList());

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (1,1,0)
        BigDecimal[] predictedRates = ArimaModel.predict(trainingRates, actualRates.size(), 1, 1, 0);

        // –í—ã—á–∏—Å–ª—è–µ–º MAE (—Å—Ä–µ–¥–Ω—é—é –æ—à–∏–±–∫—É)
        BigDecimal totalError = BigDecimal.ZERO;
        for (int i = 0; i < actualRates.size(); i++) {
            totalError = totalError.add(actualRates.get(i).getRate().subtract(predictedRates[i]).abs());
        }
        BigDecimal mae = totalError.divide(BigDecimal.valueOf(actualRates.size()), RoundingMode.HALF_UP);

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        log.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å ARIMA(1,1,0) –¥–ª—è {} –∑–∞ –Ω–µ–¥–µ–ª—é: {} - {}", currency, startOfWeek, endOfWeek);
        for (int i = 0; i < actualRates.size(); i++) {
            log.info("–î–∞—Ç–∞: {} | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {} | –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π: {}", actualRates.get(i).getDate(), actualRates.get(i).getRate(), predictedRates[i]);
        }
        log.info("üìå –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE): {}", mae);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
        Map<String, Object> result = new HashMap<>();
        result.put("currency", currency);
        result.put("start_date", startOfWeek);
        result.put("end_date", endOfWeek);
        result.put("actual_rates", actualRates);
        result.put("predicted_rates", predictedRates);
        result.put("mae", mae);
        return result;
    }
}
