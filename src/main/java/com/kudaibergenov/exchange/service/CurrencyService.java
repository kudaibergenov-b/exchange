package com.kudaibergenov.exchange.service;

import com.kudaibergenov.exchange.model.CurrencyRate;
import com.kudaibergenov.exchange.repository.CurrencyRateRepository;
import com.kudaibergenov.exchange.util.ArimaModel;
import com.kudaibergenov.exchange.util.ExcelImporter;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

@Service
public class CurrencyService {

    private static final Logger logger = Logger.getLogger(CurrencyService.class.getName());

    private final ExcelImporter excelImporter;
    private final CurrencyRateRepository repository;

    public CurrencyService(ExcelImporter excelImporter, CurrencyRateRepository repository) {
        this.excelImporter = excelImporter;
        this.repository = repository;
    }

    public void importFromExcel(String filePath) {
        try {
            excelImporter.importData(filePath);
            logger.info("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
        } catch (Exception e) {
            logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }

    public List<CurrencyRate> getHistoricalRates(String currency, int days) {
        if (days <= 0) {
            throw new IllegalArgumentException("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");
        }

        LocalDate endDate = LocalDate.now();
        LocalDate startDate = endDate.minusDays(days);

        List<CurrencyRate> rates = repository.findByDateBetweenAndCurrencyCode(startDate, endDate, currency);

        if (rates.isEmpty()) {
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ " + days + " –¥–Ω–µ–π –¥–ª—è –≤–∞–ª—é—Ç—ã: " + currency);
        }

        return rates;
    }

    public List<CurrencyRate> predictExchangeRate(String currency, int days) {
        LocalDate endDate = LocalDate.now();
        LocalDate startDate = endDate.minusDays(365); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö

        List<CurrencyRate> historicalRates = repository.findByDateBetweenAndCurrencyCode(startDate, endDate, currency);

        if (historicalRates.size() < 30) {
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã: " + currency);
            throw new IllegalStateException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è");
        }

        historicalRates = historicalRates.stream()
                .sorted(Comparator.comparing(CurrencyRate::getDate))
                .toList();

        List<BigDecimal> rates = historicalRates.stream()
                .map(CurrencyRate::getRate)
                .collect(Collectors.toList());

        BigDecimal[] predictions = ArimaModel.predict(rates, days);
        LocalDate predictionDate = endDate.plusDays(1);

        return IntStream.range(0, days)
                .mapToObj(i -> new CurrencyRate(
                        predictionDate.plusDays(i),
                        currency,
                        predictions[i]
                ))
                .collect(Collectors.toList());
    }

    // ‚úÖ –ú–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–º –ø–µ—Ä–∏–æ–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–µ–≤—Ä–∞–ª—å 2025)
    public void testModelForPastMonth(String currency, int year, int month) {
        LocalDate startOfMonth = LocalDate.of(year, month, 1);
        LocalDate endOfMonth = startOfMonth.withDayOfMonth(startOfMonth.lengthOfMonth());

        // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å 2025
        List<CurrencyRate> actualRates = repository.findByDateBetweenAndCurrencyCode(startOfMonth, endOfMonth, currency);
        if (actualRates.isEmpty()) {
            throw new IllegalStateException("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ " + month + "/" + year + " –¥–ª—è " + currency);
        }

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ 31 —è–Ω–≤–∞—Ä—è 2025
        LocalDate lastTrainingDate = startOfMonth.minusDays(1);
        List<CurrencyRate> trainingData = repository.findByDateBeforeAndCurrencyCode(lastTrainingDate, currency);
        if (trainingData.size() < 100) { // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 100 —Ç–æ—á–µ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            throw new IllegalStateException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.");
        }

        // ‚úÖ –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ BigDecimal
        trainingData = trainingData.stream()
                .sorted(Comparator.comparing(CurrencyRate::getDate))
                .toList();
        List<BigDecimal> trainingRates = trainingData.stream()
                .map(CurrencyRate::getRate)
                .collect(Collectors.toList());

        // ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –∫—É—Ä—Å –Ω–∞ —Ñ–µ–≤—Ä–∞–ª—å 2025
        int daysToPredict = actualRates.size();
        BigDecimal[] predictedRates = ArimaModel.predict(trainingRates, daysToPredict);

        // ‚úÖ –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –∞–±—Å–æ–ª—é—Ç–Ω—É—é –æ—à–∏–±–∫—É (MAE)
        BigDecimal totalError = BigDecimal.ZERO;
        for (int i = 0; i < daysToPredict; i++) {
            BigDecimal error = actualRates.get(i).getRate().subtract(predictedRates[i]).abs();
            totalError = totalError.add(error);
        }
        BigDecimal mae = totalError.divide(BigDecimal.valueOf(daysToPredict), BigDecimal.ROUND_HALF_UP);

        // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è " + currency + " –∑–∞ " + month + "/" + year);
        for (int i = 0; i < daysToPredict; i++) {
            logger.info("–î–∞—Ç–∞: " + actualRates.get(i).getDate() +
                    " | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: " + actualRates.get(i).getRate() +
                    " | –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π: " + predictedRates[i]);
        }
        logger.info("üìå –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE): " + mae);
    }
}
